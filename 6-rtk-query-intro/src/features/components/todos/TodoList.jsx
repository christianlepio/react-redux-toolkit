import { useState } from "react"
//custom hooks generated by RTK query
import { 
    useGetTodosQuery,
    useAddTodoMutation,
    useUpdateTodoMutation,
    useDeleteTodoMutation 
} from "../../api/apiSlice"

const TodoList = () => {
    const [newTodo, setNewTodo] = useState('')
    //variables from generated custom hooks of RTK query
    const {
        data: todos, //container of all fetched data from useGetTodosQuery
        isLoading, //returns boolean
        isSuccess, //returns boolean
        isError, //returns boolean
        error //returns error message
    } = useGetTodosQuery()
    //initialize RTK custom hooks mutation
    const [addTodo] = useAddTodoMutation()
    const [updateTodo] = useUpdateTodoMutation()
    const [deleteTodo] = useDeleteTodoMutation()

    const handleSubmit = (e) => {
        e.preventDefault()
        //call add todo function here
        addTodo({
            userId: 1,
            title: newTodo,
            completed: false
        })

        setNewTodo('')
    }

    const newItemSection = 
        <form onSubmit={handleSubmit}>
            <div className="d-flex justify-content-start mb-2">
                <div className="mb-3">
                    <input 
                        type="text" 
                        className="form-control" 
                        id="exampleFormControlInput1" 
                        placeholder="Enter new todo" 
                        value={newTodo}
                        onChange={(e) => setNewTodo(e.target.value)}
                    />
                </div>
                <div className="mb-3">
                    <button     
                        type="submit" 
                        className="btn btn-secondary ms-1"
                    >
                        <i className="bi bi-upload"></i>
                    </button>
                </div>
            </div>
        </form>

    let content
    if (isLoading) {
        content = <p className="mt-5 fs-2">Loading...</p>
    } else if (isSuccess) {
        //map all todos
        content = todos.map(todo => (
            <article key={todo.id} className="my-2 p-3 border rounded-3">
                <div className="d-flex justify-content-between align-items-center">
                    <div className="form-check">
                        <input 
                            className="form-check-input" 
                            type="checkbox" 
                            checked={todo.completed}
                            id={todo.id}
                            //spread existing todo here and overwrite completed field value in updateTodo function
                            onChange={() => updateTodo({ ...todo, completed: !todo.completed })}
                        />
                        <label className="form-check-label" htmlFor={todo.id}>
                            {todo.title}
                        </label>
                    </div>
                    <div>
                        <button 
                            type="button"
                            className="btn btn-danger"
                            //pass id in deleteTodo function
                            onClick={() => deleteTodo({ id: todo.id })}
                        >
                            <i className="bi bi-trash3-fill"></i>
                        </button>
                    </div>
                </div>                
            </article>
        ))
    } else if (isError) {
        content = <p className="mt-5 fs-2">{error}</p>
    }

    return (
        <main>
            <h1 className="h1">Todo List</h1>
            {newItemSection}
            {content}
        </main>
    )
}

export default TodoList